const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");

const Issue = require("../models/issue");
const checkAuth = require('../utils/check-auth');

router.post("/list", checkAuth, (req, res, next) => {
    var userCode = req.body.userCode;
    var loginId = req.body.loginId;
    var category = req.body.category;
    var error = req.body.error;
    var fromDate = req.body.fromDate;
    var toDate = req.body.toDate;
    var pageSize = req.body.pageSize || 20;
    var pageNo = req.body.pageNo || 1;
    var query = {};
    if (userCode && userCode !== '') {
        query['$or'] = [{ userCode: { $regex: new RegExp(userCode, "i") } }, { loginId: { $regex: new RegExp(userCode, "i") } }];
    }

    if (category && category !== '') {
        query['category'] = { $regex: new RegExp(category, "i") };
    }
    if (error && error !== '') {
        query['error'] = new RegExp(error, "i");
    }

    if (fromDate && fromDate !== '' && toDate && toDate !== '') {
        query['createdDate'] = {
            $gte: new Date(fromDate),
            $lt: new Date(toDate + ' 23:59:59')
        };
    }
    Issue.find(query).skip((pageSize * pageNo) - pageSize).limit(pageSize)
        .sort({ 'createdDate': -1 })
        .exec()
        .then(docs => {
            if (docs.length >= 0) {
                Issue.countDocuments(query).exec(function (err, count) {
                    if (err) return next(err)
                    res.status(200).json({ data: docs, totalRows: count })
                })

            } else {
                res.status(404).json({
                    message: 'No record found'
                });
            }
        })
        .catch(err => {
            console.log(err);
            res.status(500).json({
                message: 'No record found'
            });
        });
});

router.get("/:id", checkAuth, (req, res, next) => {
    const id = req.params.id;
    Issue.findById(id)
        .exec()
        .then(doc => {
            // console.log("From database", doc);
            if (doc) {
                res.status(200).json(doc);
            } else {
                res
                    .status(404)
                    .json({ message: "No valid entry found for ID" + id });
            }
        })
        .catch(err => {
            console.log(err);
            res.status(500).json({ message: "No valid entry found for ID" + id });
        });
});

router.post("/add", (req, res, next) => {
    const issue = new Issue({
        _id: new mongoose.Types.ObjectId(),
        userCode: req.body.userCode,
        loginId: req.body.loginId,
        category: req.body.category,
        severity: req.body.severity,
        error: req.body.error,
        detail: req.body.detail,
        solution: req.body.solution,
        createdDate: new Date(),
        lastUpdateDate: new Date()
    });
    issue
        .save().then(result => {
            res.status(200).json({
                status: 'OK',
                message: 'Issue added'
            });
        })
        .catch(err => {
            console.log(err);
            res.status(200).json({
                status: 'FAIL',
                message: err + ''
            });
        });
});

module.exports = router;
